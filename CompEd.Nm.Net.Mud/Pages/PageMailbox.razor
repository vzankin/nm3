@page "/mailbox/{id:int}"

@inject IStringLocalizer<App> Localizer
@inject Db.MainContext Db
@inject Db.CacheContextFactory CacheFactory

<PageTitle>@Mailbox.Name</PageTitle>

<MudPaper Class="pa-8" Width="100%" Height="100%">
    <MudText Typo=Typo.h5 GutterBottom=true>@Mailbox.Name</MudText>
    <MudText Typo=Typo.caption>@Localizer["Last check"]:&nbsp;@Info?.LastCheck.ToLocalTime()</MudText>
    <MudTabs>
        <MudTabPanel Text=@Localizer["Mails"] Icon=@Icons.Material.Filled.Mail>
            <!--MudList Dense=true Style="overflow-y: auto; max-height: calc(100vh - 260px);">
                <Virtualize Context="mail" ItemsProvider=@GetMails>
                    <ItemContent>
                        <MudListItem>
                            <MudText>@mail.Subject</MudText>
                        </MudListItem>
                    </ItemContent>
                    <Placeholder>
                        <MudProgressCircular>
                            <MudText>@Localizer["Loading..."]</MudText>
                        </MudProgressCircular>
                    </Placeholder>
                </Virtualize>
            </MudList-->
            <MudTable Hover=true Loading=@loading LoadingProgressColor=Color.Info FixedHeader=true Dense=true Elevation=0 Virtualize=true ServerData=@GetMails2 RowsPerPage="100" Height="calc(100vh - 275px)">
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh>@Localizer["Id"]</MudTh>
                    <MudTh>@Localizer["Date"]</MudTh>
                    <MudTh>@Localizer["From"]</MudTh>
                    <MudTh>@Localizer["Subject"]</MudTh>
                    <MudTh>@Localizer["PecType"]</MudTh>
                    <MudTh>@Localizer["PecId"]</MudTh>
                    <MudTh>@Localizer["SdiType"]</MudTh>
                    <MudTh>@Localizer["SdiId"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel=@Localizer["*"]>
                        <MudCheckBox Checked=@context.Uid.HasValue ReadOnly=true/>
                    </MudTd>
                    <MudTd>@context.Id</MudTd>
                    <MudTd DataLabel=@Localizer["Date"]>@context.Date?.ToLocalTime()</MudTd>
                    <MudTd DataLabel=@Localizer["From"]>@context.From</MudTd>
                    <MudTd DataLabel=@Localizer["Subject"]>@context.Subject</MudTd>
                    <MudTd DataLabel=@Localizer["PecType"]>@context.PecType</MudTd>
                    <MudTd DataLabel=@Localizer["PecId"]>@context.PecId</MudTd>
                    <MudTd DataLabel=@Localizer["SdiType"]>@context.SdiType</MudTd>
                    <MudTd DataLabel=@Localizer["SdiId"]>@context.SdiId</MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>@Localizer["No matching records found"]</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>@Localizer["Loading..."]</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
        </MudTabPanel>
        <MudTabPanel Text=@Localizer["Log"] Icon=@Icons.Material.Filled.List>
        </MudTabPanel>
    </MudTabs>
</MudPaper>

@code
{
    [Parameter]
    public int Id { get; set; }

    public required Db.Model.Mailbox Mailbox { get; set; }
    public required Db.CacheContext Cache { get; set; }
    public Db.Model.Cache? Info { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Mailbox = Db.Mailboxes.Single(x => x.Id == Id);
        Cache = await CacheFactory.CreateCacheContext(Mailbox, default).ConfigureAwait(false);
        Info = await Cache.Cache.OrderBy(x => x.Id).FirstOrDefaultAsync().ConfigureAwait(false);
    }

    public void Dispose()
    {
        Cache.Dispose();
        GC.SuppressFinalize(this);
    }

    private async ValueTask<ItemsProviderResult<Db.Model.Mail>> GetMails(ItemsProviderRequest request)
    {
        var totalMails = await Cache.Mails.CountAsync(request.CancellationToken).ConfigureAwait(false);
        var numMails = Math.Min(request.Count, totalMails - request.StartIndex);
        var mails = await Cache.Mails.OrderByDescending(x => x.Id).Skip(request.StartIndex).Take(numMails).ToArrayAsync(request.CancellationToken).ConfigureAwait(false);
        return new ItemsProviderResult<Db.Model.Mail>(mails, totalMails);
    }

    private bool loading = false;

    private async Task<TableData<Db.Model.Mail>> GetMails2(TableState state)
    {
        this.loading = true;
        var totalMails = await Cache.Mails.CountAsync().ConfigureAwait(false);
        var startIndex = state.PageSize * state.Page;
        var numMails = Math.Min(state.PageSize, totalMails - startIndex);
        var mails = await Cache.Mails.OrderByDescending(x => x.Id).Skip(startIndex).Take(numMails).ToArrayAsync().ConfigureAwait(false);
        this.loading = false;
        return new() { TotalItems = totalMails, Items = mails };
    }
}
