@page "/"

@inject Db.MainContext DbContext
@inject DialogService Dialog
@inject NotificationService Notification
@inject CompEd.Nm.Net.Settings Settings
@inject MailboxMonitorManager Monitors

<PageTitle>@L["Notification Monitor 2.0"]</PageTitle>

<RadzenButton Icon="add_circle_outline" class="rz-ml-4 rz-mb-2" Text=@L["New Mailbox"] Click="@CreateMailbox" />
<RadzenDataList TItem=Db.Model.Mailbox Data=@DbContext.Mailboxes.OrderBy(x => x.Id) Density=Density.Compact>
    <Template>
        <MailboxDataListItem Mailbox=@context OnModify=ModifyMailbox OnDelete=DeleteMailbox />
    </Template>
</RadzenDataList>

@code
{
    async Task CreateMailbox()
    {
        try
        {
            var mailbox = new Db.Model.Mailbox { Name = $"mailbox{DbContext.Mailboxes.Count() + 1}", ImapHost = "" };
            mailbox.Folder = Path.Combine(Settings.RootFolder, mailbox.Name);
            var result = await Dialog.OpenAsync(L["New Mailbox"], ds =>@<MailboxDialog Mailbox=mailbox DialogService=ds NameValidator=@(name => ValidateNameCreate(name)) /> );
            if (result == true)
            {
                // 1. Update databse
                var entry = DbContext.Mailboxes.Add(mailbox);
                await DbContext.SaveChangesAsync();
                entry.State = EntityState.Detached;
                // 2. Create mailbox monitor
                await Monitors.CreateMonitor(mailbox);
            }
        }
        catch (Exception e)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = e.Message,
                Detail = e.InnerMessage(),
                Duration = -1,
            };
            Notification.Notify(msg);
        }
    }

    async Task ModifyMailbox(Db.Model.Mailbox oldMailbox)
    {
        try
        {
            var newMailbox = oldMailbox.Clone();
            var result = await Dialog.OpenAsync(L["Edit Mailbox"], ds => @<MailboxDialog Mailbox=newMailbox DialogService=ds NameValidator=@(name => ValidateNameModify(oldMailbox, name)) />);
            if (result == true)
            {
                // 1. Update databse
                var entry = DbContext.Mailboxes.Update(newMailbox);
                await DbContext.SaveChangesAsync();
                entry.State = EntityState.Detached;
                // 2. Restart mailbox monitor
                await Monitors.DeleteMonitor(oldMailbox);
                await Monitors.CreateMonitor(newMailbox);
            }
        }
        catch (Exception e)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                    Summary = e.Message,
                    Detail = e.InnerMessage(),
                Duration = -1,
            };
            Notification.Notify(msg);
        }
    }

    async Task DeleteMailbox(Db.Model.Mailbox mailbox)
    {
        try
        {
            // 1. Update databse
            var entry = DbContext.Mailboxes.Remove(mailbox);
            await DbContext.SaveChangesAsync();
            entry.State = EntityState.Detached;
            // 2. Delete mailbox monitor
            await Monitors.DeleteMonitor(mailbox);
        }
        catch (Exception e)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = e.Message,
                Detail = e.InnerMessage(),
                Duration = -1,
            };
            Notification.Notify(msg);
        }
    }

    // returns true if there is no another mailbox with such name
    bool ValidateNameCreate(string name) =>
        !DbContext.Mailboxes.Any(x => string.Equals(x.Name, name, StringComparison.OrdinalIgnoreCase));

    // returns true if:
    // a) name not changed
    // b) if name has chaged then returns true if there is no another mailbox with such name
    bool ValidateNameModify(Db.Model.Mailbox mailbox, string name) =>
        string.Equals(mailbox.Name, name, StringComparison.OrdinalIgnoreCase) || !DbContext.Mailboxes.Any(x => string.Equals(x.Name, name, StringComparison.OrdinalIgnoreCase));
}