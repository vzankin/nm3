@page "/mailbox/{id:int}"

@inject IStringLocalizer<App> Localizer
@inject Db.MainContext Db
@inject Db.CacheContextFactory CacheFactory

<PageTitle>@Mailbox.Name</PageTitle>

<h3>@Mailbox.Name</h3>

@code
{
    [Parameter]
    public int Id { get; set; }

    public required Db.Model.Mailbox Mailbox { get; set; }
    public Db.Model.Cache? Info { get; set; }
    public required Db.CacheContext Cache { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Mailbox = Db.Mailboxes.Single(x => x.Id == Id);
        Cache = await CacheFactory.CreateCacheContext(Mailbox, default).ConfigureAwait(false);
        Info = await Cache.Cache.OrderBy(x => x.Id).FirstOrDefaultAsync().ConfigureAwait(false);
    }

    public void Dispose()
    {
        Cache.Dispose();
        GC.SuppressFinalize(this);
    }

    private async ValueTask<ItemsProviderResult<Db.Model.Mail>> GetMails(ItemsProviderRequest request)
    {
        var totalMails = await Cache.Mails.CountAsync(request.CancellationToken).ConfigureAwait(false);
        var numMails = Math.Min(request.Count, totalMails - request.StartIndex);
        var mails = await Cache.Mails.OrderByDescending(x => x.Id).Skip(request.StartIndex).Take(numMails).ToArrayAsync(request.CancellationToken).ConfigureAwait(false);
        return new ItemsProviderResult<Db.Model.Mail>(mails, totalMails);
    }
}
